<?php
// auto-generated by sfPropelCrud
// date: 2009/02/10 08:16:08
?>
<?php

/**
 * personal actions.
 *
 * @package    sf_sandbox
 * @subpackage personal
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class personalActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('personal', 'list');
  }

  public function executeList()
  {
    $this->personals = PersonalPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
  	$c = new Criteria();
  	$c->add(UserPeer::USERNAME, $this->getUser()->getAttribute('username'));
  	$user = UserPeer::doSelectOne($c);
    $c = new Criteria();
    $c->add(PersonalPeer::USER_ID, $user->getId());
    $this->personal = PersonalPeer::doSelectOne($c);
  	
    $c = new Criteria();
    $c->add(LoruserPeer::USER_ID, $user->getId());
    $c->addJoin(LoruserPeer::LORVALUES_ID, LorvaluesPeer::ID);
    $c->add(LorvaluesPeer::LORFIELDS_ID, sfConfig::get('app_lor_linkedin'));
    $this->lors = LorvaluesPeer::doSelect($c);
    
    $c = new Criteria();
    $c->add(LoruserPeer::USER_ID, $user->getId());
    $c->addJoin(LoruserPeer::LORVALUES_ID, LorvaluesPeer::ID);
    $c->add(LorvaluesPeer::LORFIELDS_ID, sfConfig::get('app_lor_general'));
    $this->glors = LorvaluesPeer::doSelect($c);
    // display the checkbox 		
	$userid =  $this->getUser()->getAttribute('userid');
	
    $c = new Criteria();
    $c->add(PersonalPeer::USER_ID,$userid);
	$this->personal = PersonalPeer::doSelectOne($c);
	//$this->personalid= $this->personal->getId(); 
				     
    //$c = new Criteria();
    //$c->add(PersonalPeer::USER_ID,$this->userid );
	//$personal = PersonalPeer::doSelectOne($c);
	//$this->senderemail=$personal->getId();
    $c = new Criteria();
    $c->addJoin(WorktypePeer::ID, PersonalWorktypePeer::ID);
	$c->add(PersonalWorktypePeer::PERSONAL_ID, $this->personal->getId());
	$c->addAscendingOrderByColumn(WorktypePeer::ID);
	$this->worktypes = WorktypePeer::doSelect($c);
    
  
    
    $this->forward404Unless($this->personal);
    
    
    
  }

  public function executeCreate()
  {
    $this->personal = new Personal();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
  	$c = new Criteria();
  	$c->add(UserPeer::USERNAME, $this->getUser()->getAttribute('username'));
  	$user = UserPeer::doSelectOne($c);
    //$this->personal = PersonalPeer::retrieveByPk($this->getRequestParameter('id'));
    $c = new Criteria();
    $c->add(PersonalPeer::USER_ID, $user->getId());
    $this->personal = PersonalPeer::doSelectOne($c);
    $this->forward404Unless($this->personal);
    
    $this->privacyoptions = Array('1' => 'Myself', '2' => 'My Friends', '3' => 'IT BHU', '4' => 'Everyone');
    $this->salutations = Array('Mr'=>'Mr', 'Miss'=>'Miss', 'Mrs'=>'Mrs', 'Ms'=>'Ms', 'Dr'=>'Dr', 'Prof'=>'Prof');
    $this->gender = Array('Female'=>'Female', 'Male'=>'Male');
    $this->mstatus = Array(' '=>'Select', 'Single'=>'Single', 'Married'=>'Married');
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $personal = new Personal();
    }
    else
    {
      $personal = PersonalPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($personal);
    }
	if($this->getRequest()->getFileName('image'))
	{
    	$fileName = md5($this->getRequest()->getFileName('image').time().rand(0, 99999));
	 	$ext = $this->getRequest()->getFileExtension('image');
	 	$this->getRequest()->moveFile('image', sfConfig::get('sf_upload_dir')."//profilepic//".$fileName.$ext);
	 	$fullname = $fileName.$ext;
	 	$fullpath = '/uploads/profilepic/'.$fullname;
    	$personal->setImage($fullpath);
	}
    
    $personal->setId($this->getRequestParameter('id'));
    $personal->setUserId($this->getRequestParameter('user_id') ? $this->getRequestParameter('user_id') : null);

    $personal->setImageflag($this->getRequestParameter('imageflag'));
    $personal->setSalutation($this->getRequestParameter('salutation'));
    $personal->setFirstname($this->getRequestParameter('firstname'));
    $personal->setFirstnameflag($this->getRequestParameter('firstnameflag'));
    $personal->setMiddlename($this->getRequestParameter('middlename'));
    $personal->setMiddlenameflag($this->getRequestParameter('middlenameflag'));
    $personal->setLastname($this->getRequestParameter('lastname'));
    $personal->setLastnameflag($this->getRequestParameter('lastnameflag'));
    $personal->setMaidenname($this->getRequestParameter('maidenname'));
    $personal->setMaidennameflag($this->getRequestParameter('maidennameflag'));
    $personal->setItbhuname($this->getRequestParameter('itbhuname'));
    $personal->setItbhunameflag($this->getRequestParameter('itbhunameflag'));
    $personal->setGender($this->getRequestParameter('gender'));
    $personal->setGenderflag($this->getRequestParameter('genderflag'));
    
    if ($this->getRequestParameter('dob'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('dob'), $this->getUser()->getCulture());
      $personal->setDob("$y-$m-$d");
    }
    $personal->setDobflag($this->getRequestParameter('dobflag'));
    $personal->setMaritalstatus($this->getRequestParameter('maritalstatus'));
    $personal->setMaritalstatusflag($this->getRequestParameter('maritalstatusflag'));
    $personal->setMobile($this->getRequestParameter('mobile'));
    $personal->setMobileflag($this->getRequestParameter('mobileflag'));
    $personal->setEmail($this->getRequestParameter('email'));
    $personal->setEmailflag($this->getRequestParameter('emailflag'));
    $personal->setWebsite($this->getRequestParameter('website'));
    $personal->setWebsiteflag($this->getRequestParameter('websiteflag'));
    $personal->setLinkedin($this->getRequestParameter('linkedin'));
    $personal->setLinkedinflag($this->getRequestParameter('linkedinflag'));
    $personal->setHobbies($this->getRequestParameter('hobbies'));
    $personal->setHobbiesflag($this->getRequestParameter('hobbiesflag'));
    $personal->setInterest($this->getRequestParameter('interest'));
    $personal->save();
    
    $user = $personal->getUser();
    $user->setCurrentlyat($this->getRequestParameter('currentlyat'));
    $user->setCurrentlyatflag($this->getRequestParameter('currentlyatflag'));
    $user->save();

    return $this->redirect('personal/show?id='.$personal->getId());
  }

  public function executeDeleteimage(){
  	$personal = PersonalPeer::retrieveByPK($this->getRequestParameter('id'));
  	$personal->setImage('');
  	$personal->save();
  }
  
  public function executeDelete()
  {
    $personal = PersonalPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($personal);

    $personal->delete();

    return $this->redirect('personal/list');
  }
  
  public function executeLoraccept(){
  	$lor = LorvaluesPeer::retrieveByPK($this->getRequestParameter('lorid'));
  	
  	$c = new Criteria();
  	$c->add(PersonalPeer::USER_ID, $this->getUser()->getAttribute('userid'));
  	$personal = PersonalPeer::doSelectOne($c);
  	$personal->setLinkedin($lor->getData());
  	$personal->save();
  	
  	$c = new Criteria();
    $c->add(LoruserPeer::USER_ID, $this->getUser()->getAttribute('userid'));
    $c->addJoin(LoruserPeer::LORVALUES_ID, LorvaluesPeer::ID);
    $c->add(LorvaluesPeer::LORFIELDS_ID, sfConfig::get('app_lor_linkedin'));
    $lors = LorvaluesPeer::doSelect($c);
  	foreach ($lors as $lor){
  		$c = new Criteria();
  		$c->add(LoruserPeer::LORVALUES_ID, $lor->getId());
  		$loruser = LoruserPeer::doSelectOne($c);
  		$loruser->delete();
  		$lor->delete();
  	}
  	$this->redirect('/personal/show');
  }
  
  public function executeLorreject(){
  	$lor = LorvaluesPeer::retrieveByPK($this->getRequestParameter('lorid'));
  	
  	$c = new Criteria();
  	$c->add(LoruserPeer::LORVALUES_ID, $lor->getId());
  	$loruser = LoruserPeer::doSelectOne($c);
  	
  	$loruser->delete();
  	$lor->delete();
  
  	$this->redirect('/personal/show');
  }
  
  public function executeLorrejectll()
  {
  	$a = $this->getRequestParameter('a');
	$lorid = $this->getRequestParameter('lorid');
  	
  	$c = new Criteria();
    $c->add(LoruserPeer::USER_ID, $this->getUser()->getAttribute('userid'));
    $c->addJoin(LoruserPeer::LORVALUES_ID, LorvaluesPeer::ID);
    if($a == 'g'){
    	$c->add(LorvaluesPeer::LORFIELDS_ID, sfConfig::get('app_lor_general'));
    }else{
    	$c->add(LorvaluesPeer::LORFIELDS_ID, sfConfig::get('app_lor_linkedin'));
    }
    if($lorid){
    	$c->add(LorvaluesPeer::ID, $lorid);
    }
    $lors = LorvaluesPeer::doSelect($c);
  	foreach ($lors as $lor){
  		$c = new Criteria();
  		$c->add(LoruserPeer::LORVALUES_ID, $lor->getId());
  		$loruser = LoruserPeer::doSelectOne($c);
  		$loruser->delete();
  		$lor->delete();
  	}
  	$this->redirect('/personal/show');
  }

  
   /* Notes */
  
  public function executeNotes(){
  	$this->userid = $this->getUser()->getAttribute('userid');
  	$c = new Criteria();
  	$c->add(NotesPeer::USER_ID, $this->userid);
  	$note = NotesPeer::doSelectOne($c);
  	if($note){
  		$this->note = $note;
  	}else{
  		$this->note = new Notes();
  	}
  }
  
  public function executeSavenotes(){
  	$userid = $this->getRequestParameter('userid');
  	if(!$this->getRequestParameter('id')){
  		$note = new Notes();
  	}else{
  		$note = NotesPeer::retrieveByPK($this->getRequestParameter('id'));
  	}
  	$note->setUserId($userid);
  	$note->setNote($this->getRequestParameter('note'));
  	$note->save();
  	if($this->getRequestParameter('pdf') == '1'){
  		$this->redirect('/personal/notespdf');;
  	}else{
  		$this->redirect('/personal/notes');
  	}
  }
  public function executeNotespdf()
  {
  	$c = new Criteria();
  	$c->add(NotesPeer::USER_ID, $this->getUser()->getAttribute('userid'));
  	$note = NotesPeer::doSelectOne($c);
  	
    // pdf object
    $pdf = new sfTCPDF();
    // settings
    $pdf->SetFont("FreeSerif", "", 12);
    $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
    //$pdf->setHeaderFont(array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
    //$pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);
    //$pdf->setFooterFont(array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
    $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
    $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
    // init pdf doc
    //$pdf->AliasNbPages();
    $pdf->AddPage();
    //$pdf->Cell(80, 10, $resume->getContent());
    $pdf->writeHTMLCell(200, 10, PDF_MARGIN_LEFT, PDF_MARGIN_TOP, $note->getNote());
    // output
    $pdf->Output();
    return sfView::NONE;
  }
  

}
