<?php
// auto-generated by sfPropelCrud
// date: 2009/02/10 08:16:08
?>
<?php

/**
 * family actions.
 *
 * @package    sf_sandbox
 * @subpackage family
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class familyActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('family', 'list');
  }

  public function executeList()
  {
    $this->familys = FamilyPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
  	$c = new Criteria();
  	$c->add(UserPeer::USERNAME, $this->getUser()->getAttribute('username'));
  	$user = UserPeer::doSelectOne($c);
    $c = new Criteria();
    $c->add(FamilyPeer::USER_ID, $user->getId());
    $this->family = FamilyPeer::doSelectOne($c);
  	
   /* $c = new Criteria();
    $c->add(LoruserPeer::USER_ID, $user->getId());
    $c->addJoin(LoruserPeer::LORVALUES_ID, LorvaluesPeer::ID);
    $c->add(LorvaluesPeer::LORFIELDS_ID, sfConfig::get('app_lor_linkedin'));
    $this->lors = LorvaluesPeer::doSelect($c);
    
    $c = new Criteria();
    $c->add(LoruserPeer::USER_ID, $user->getId());
    $c->addJoin(LoruserPeer::LORVALUES_ID, LorvaluesPeer::ID);
    $c->add(LorvaluesPeer::LORFIELDS_ID, sfConfig::get('app_lor_general'));
    $this->glors = LorvaluesPeer::doSelect($c);*/
    
    if(!$this->family) {
    	$this->forward('family', 'edit');
    }
  }

  public function executeCreate()
  {
    $this->family = new Family();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
  	$c = new Criteria();
  	$c->add(UserPeer::USERNAME, $this->getUser()->getAttribute('username'));
  	$user = UserPeer::doSelectOne($c);
    $this->family = FamilyPeer::retrieveByPk($this->getRequestParameter('id'));
    $c = new Criteria();
    $c->add(FamilyPeer::USER_ID, $user->getId());
    $this->family = FamilyPeer::doSelectOne($c);
    
    if(!$this->family){
    	$this->family = new Family();
    	$this->family->setUser($user);
    }
   $this->privacyoptions = Array('1' => 'Myself', '2' => 'My Friends', '3' => 'IT BHU', '4' => 'Everyone');
    //$this->salutations = Array('Mr'=>'Mr', 'Miss'=>'Miss', 'Mrs'=>'Mrs', 'Ms'=>'Ms', 'Dr'=>'Dr', 'Prof'=>'Prof');
    //$this->gender = Array('Female'=>'Female', 'Male'=>'Male');
    //$this->mstatus = Array(' '=>'Select', 'Single'=>'Single', 'Married'=>'Married');
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $family = new Family();
    }
    else
    {
      $family = FamilyPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($family);
    }
	/*if($this->getRequest()->getFileName('image'))
	{
    	$fileName = md5($this->getRequest()->getFileName('image').time().rand(0, 99999));
	 	$ext = $this->getRequest()->getFileExtension('image');
	 	$this->getRequest()->moveFile('image', sfConfig::get('sf_upload_dir')."//profilepic//".$fileName.$ext);
	 	$fullname = $fileName.$ext;
	 	$fullpath = '/uploads/profilepic/'.$fullname;
    	$personal->setImage($fullpath);
	}*/
    
    $family->setId($this->getRequestParameter('id'));
    $family->setUserId($this->getRequestParameter('user_id') ? $this->getRequestParameter('user_id') : null);

    
    if ($this->getRequestParameter('dom'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('dom'), $this->getUser()->getCulture());
      $family->setDom("$y-$m-$d");
    }
    $family->setDomflag($this->getRequestParameter('domflag'));
    $family->setSpousename($this->getRequestParameter('spousename'));
    $family->setSpousenameflag($this->getRequestParameter('spousenameflag'));
    $family->setSpouseemployer($this->getRequestParameter('spouseemployer'));
    $family->setSpouseemployerflag($this->getRequestParameter('spouseemployerflag'));
    $family->setSpousetitle($this->getRequestParameter('spousetitle'));
    $family->setSpousetitleflag($this->getRequestParameter('spousetitleflag'));
    $family->setChildren($this->getRequestParameter('children'));
    $family->setChildrenflag($this->getRequestParameter('childrenflag'));
    
    
   
    $family->save();
    
    $user = $family->getUser();
    $user->setCurrentlyat($this->getRequestParameter('currentlyat'));
    $user->setCurrentlyatflag($this->getRequestParameter('currentlyatflag'));
    $user->save();

    return $this->redirect('family/show?id='.$family->getId());
  }

  /*public function executeDeleteimage(){
  	$family = PersonalPeer::retrieveByPK($this->getRequestParameter('id'));
  	$family->setImage('');
  	$personal->save();
  }*/
  
  public function executeDelete()
  {
    $family = FamilyPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($family);

    $family->delete();

    return $this->redirect('family/list');
  }
  
  public function executeLoraccept(){
  	$lor = LorvaluesPeer::retrieveByPK($this->getRequestParameter('lorid'));
  	
  	$c = new Criteria();
  	$c->add(FamilyPeer::USER_ID, $this->getUser()->getAttribute('userid'));
  	$family = FamilyPeer::doSelectOne($c);
  	//$family->setLinkedin($lor->getData());
  	$family->save();
  	
  	$c = new Criteria();
    $c->add(LoruserPeer::USER_ID, $this->getUser()->getAttribute('userid'));
    $c->addJoin(LoruserPeer::LORVALUES_ID, LorvaluesPeer::ID);
    $c->add(LorvaluesPeer::LORFIELDS_ID, sfConfig::get('app_lor_linkedin'));
    $lors = LorvaluesPeer::doSelect($c);
  	foreach ($lors as $lor){
  		$c = new Criteria();
  		$c->add(LoruserPeer::LORVALUES_ID, $lor->getId());
  		$loruser = LoruserPeer::doSelectOne($c);
  		$loruser->delete();
  		$lor->delete();
  	}
  	$this->redirect('/family/show');
  }
  
  public function executeLorreject(){
  	$lor = LorvaluesPeer::retrieveByPK($this->getRequestParameter('lorid'));
  	
  	$c = new Criteria();
  	$c->add(LoruserPeer::LORVALUES_ID, $lor->getId());
  	$loruser = LoruserPeer::doSelectOne($c);
  	
  	$loruser->delete();
  	$lor->delete();
  
  	$this->redirect('/family/show');
  }
  
  public function executeLorrejectll()
  {
  	$a = $this->getRequestParameter('a');
	$lorid = $this->getRequestParameter('lorid');
  	
  	$c = new Criteria();
    $c->add(LoruserPeer::USER_ID, $this->getUser()->getAttribute('userid'));
    $c->addJoin(LoruserPeer::LORVALUES_ID, LorvaluesPeer::ID);
    if($a == 'g'){
    	$c->add(LorvaluesPeer::LORFIELDS_ID, sfConfig::get('app_lor_general'));
    }else{
    	$c->add(LorvaluesPeer::LORFIELDS_ID, sfConfig::get('app_lor_linkedin'));
    }
    if($lorid){
    	$c->add(LorvaluesPeer::ID, $lorid);
    }
    $lors = LorvaluesPeer::doSelect($c);
  	foreach ($lors as $lor){
  		$c = new Criteria();
  		$c->add(LoruserPeer::LORVALUES_ID, $lor->getId());
  		$loruser = LoruserPeer::doSelectOne($c);
  		$loruser->delete();
  		$lor->delete();
  	}
  	$this->redirect('/family/show');
  }

  
   /* Notes */
  
  public function executeNotes(){
  	$this->userid = $this->getUser()->getAttribute('userid');
  	$c = new Criteria();
  	$c->add(NotesPeer::USER_ID, $this->userid);
  	$note = NotesPeer::doSelectOne($c);
  	if($note){
  		$this->note = $note;
  	}else{
  		$this->note = new Notes();
  	}
  }
  
  public function executeSavenotes(){
  	$userid = $this->getRequestParameter('userid');
  	if(!$this->getRequestParameter('id')){
  		$note = new Notes();
  	}else{
  		$note = NotesPeer::retrieveByPK($this->getRequestParameter('id'));
  	}
  	$note->setUserId($userid);
  	$note->setNote($this->getRequestParameter('note'));
  	$note->save();
  	if($this->getRequestParameter('pdf') == '1'){
  		$this->redirect('/family/notespdf');;
  	}else{
  		$this->redirect('/family/notes');
  	}
  }
  public function executeNotespdf()
  {
  	$c = new Criteria();
  	$c->add(NotesPeer::USER_ID, $this->getUser()->getAttribute('userid'));
  	$note = NotesPeer::doSelectOne($c);
  	
    // pdf object
    $pdf = new sfTCPDF();
    // settings
    $pdf->SetFont("FreeSerif", "", 12);
    $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
    //$pdf->setHeaderFont(array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
    //$pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE, PDF_HEADER_STRING);
    //$pdf->setFooterFont(array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
    $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
    $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
    // init pdf doc
    //$pdf->AliasNbPages();
    $pdf->AddPage();
    //$pdf->Cell(80, 10, $resume->getContent());
    $pdf->writeHTMLCell(200, 10, PDF_MARGIN_LEFT, PDF_MARGIN_TOP, $note->getNote());
    // output
    $pdf->Output();
    return sfView::NONE;
  }
  

}
